import pandas as pd
import numpy as np
import lxml
import os
from os import getcwd
import openpyxl
from openpyxl.workbook import workbook
from openpyxl import load_workbook
from openpyxl.styles import PatternFill
import xlsxwriter
from io import StringIO
import csv as csv
import linecache
import ast
import tkinter as tk
from tkinter import *
from tkinter import filedialog
from tkinter import messagebox 
from tkinter.filedialog import askopenfile
import seaborn as ssn
import matplotlib
import matplotlib as mlp
from matplotlib import pyplot as plt
from io import BytesIO
import time
import sys
import xlwings as xw
import openpyxl
from openpyxl.utils.dataframe import dataframe_to_rows
import pyxcelframe
from openpyxl import load_workbook
from pyxcelframe import copy_cell_style
from pyxcelframe import insert_frame
from pyxcelframe import insert_columns
from pyxcelframe import sheet_to_sheet
from pyxcelframe import column_last_row
import PySimpleGUI as sg
import subprocess
import threading
import urllib
import urllib.parse
import sqlalchemy 
import sqlalchemy_access as sq_a
import sqlalchemy_pyodbc_mssql as sqlalchemy
from flask_sqlalchemy import SQLAlchemy
from sqlalchemy import create_engine
import shutil
import pyodbc
import pypyodbc
import odbc
import psycopg2
import mysql.connector as sql  #1
import MySQLdb as sql
from sqlite3 import dbapi2 as sqlite
import sqlite3
from datetime import datetime #2


print("*******BOM Manuplation--PY_V-0.1 interface_GUI/J0424-89P13*******")

# Get the current date and time
current_datetime = datetime.now()

# Format the current date and time as a string
formatted_datetime = current_datetime.strftime("%Y-%m-%d %H:%M:%S")

# Print the formatted date and time
print(f"Current Date and Time: {formatted_datetime}")


'''print(f"Current Year: {current_datetime.year}")
print(f"Current Month: {current_datetime.month}")
print(f"Current Day: {current_datetime.day}")
print(f"Current Hour: {current_datetime.hour}")
print(f"Current Minute: {current_datetime.minute}")
print(f"Current Second: {current_datetime.second}")'''


file_path = 'BOM_List_OP.xlsx'
directory_path = 'D:/NX_BACKWORK/Feeder Setup_PROCESS/#Output/BOM'

print(os.path.isfile(file_path))
print(os.path.isfile(directory_path))

try:
    if os.path.isfile(file_path):
        dt_H1 = pd.read_csv(file_path)

except ValueError:
    if os.path.exists("BOM_List_OP.xlsx"):
        os.remove("BOM_List_OP.xlsx")
else:
    print("The file does not exist")

file_path = 'BOM_List_OP.xlsx'
directory_path = 'D:/NX_BACKWORK/Feeder Setup_PROCESS/#Output/Verified'

print(os.path.isfile(file_path))
print(os.path.isfile(directory_path))

try:
    if os.path.isfile(file_path):
        dt_H1 = pd.read_csv(file_path)

except ValueError:
    if os.path.exists("BOM_List_OP.xlsx"):
        os.remove("BOM_List_OP.xlsx")
else:
    print("The file does not exist")

try:
    # BOM MANIPULATION
    os.chdir('D:/NX_BACKWORK/Feeder Setup_PROCESS/#Output/BOM')
    file_path = 'BOM.xlsx'

    if os.path.isfile(file_path):
        ds1 = pd.read_excel(file_path, index_col=False)
    else:
        # Try reading as '.xls' format if '.xlsx' fails
        file_path = 'BOM.xls'
        ds1 = pd.read_excel(file_path, index_col=False)

    dfbom1 = ds1

except ValueError:
    dfbom1 = pd.read_excel(file_path,index_col=False) 

except Exception as e:
    # Handle the exception gracefully
    error_message = f"An error occurred: {e}"

    # Show error message in a pop-up box
    root = tk.Tk()
    root.withdraw()  # Hide the main window
    messagebox.showerror("Error", error_message)
    sys.exit(1)  # Exit the program with an error code

# Define your column lists
column_list_1 = ['Material', 'AltItemGroup', 'Priority', 'Long. Description', 'Ref.Designator/Circuit Reference', 'Quantity', 'Material Group']
column_list_2 = ['Internal P/N', 'Group', 'Priority', 'Description', 'Ref.Designator', 'Qty', 'SMT/THT/Mech']

# Check which column list is present in the DataFrame
if all(column in ds1.columns for column in column_list_1):
    columns_to_use = column_list_1
elif all(column in ds1.columns for column in column_list_2):
    columns_to_use = column_list_2
else:
    # Show error message if none of the column lists is present
    root = tk.Tk()
    root.withdraw()  # Hide the main window
    missing_columns = [column for column_list in [column_list_1, column_list_2] for column in column_list if column not in ds1.columns]
    error_message = f"The following columns are missing: {', '.join(missing_columns)}"
    messagebox.showerror("Error", error_message)
    sys.exit(1)  # Exit the program with an error code

# Continue with the rest of your code using 'columns_to_use'
print(f"Using columns: {columns_to_use}")

# Rest of your code here
# ...

ds1.rename(
    columns={'Material':"PartNumber", 'AltItemGroup':"Group", 'Priority':'Priority', 'Long. Description':'Long Des', 'Ref.Designator/Circuit Reference':'RefList', 'Quantity':'Qty','Material Group':'Shape'},
    inplace=True,
)

ds1.rename(
    columns={'Internal P/N':"PartNumber", 'Group':"Group", 'Priority':'Priority', 'Description':'Long Des', 'Ref.Designator':'RefList', 'Qty':'Qty','SMT/THT/Mech':'Shape'},
    inplace=True,
)

print(ds1)

ds2 = ds1[ds1['Priority'].isin([0, 1])]

#file_name ="output.xlsx"
#ds1.to_excel(file_name)

with pd.ExcelWriter("D:/NX_BACKWORK/Feeder Setup_PROCESS/#Output/BOM/BOM_List_OP.xlsx") as writer:
    ds1.to_excel(writer, sheet_name="Orginal_BOM", index=False)
    ds2.to_excel(writer, sheet_name="BOM", index=False)

    pass
    print('The file does not exist.')

Chd= os.chdir('D:/NX_BACKWORK/Feeder Setup_PROCESS/#Output/BOM')
Chd = os.getcwd()
file_path = 'BOM_List_OP.xlsx'
directory_path = 'D:/NX_BACKWORK/Feeder Setup_PROCESS/#Output/BOM'

print(os.path.isfile(file_path))
print(os.path.isfile(directory_path))

try:
    if os.path.isfile(file_path):
        dt_H1 = pd.read_csv(file_path)

except ValueError:
    ds1 = pd.read_excel(file_path, sheet_name="BOM", usecols=['PartNumber', 'Group', 'Priority', 'Long Des', 'RefList', 'Qty','Shape'],index_col=False) 
    dsn1 = pd.read_excel(file_path, sheet_name="Orginal_BOM", usecols=['PartNumber', 'Group', 'Priority', 'Long Des', 'RefList', 'Qty','Shape'],index_col=False)
    
    ds1 = ds1[['PartNumber', 'Group','Priority','Long Des','Qty','Shape','RefList']]
    ds1['RefList'] = ds1['RefList'].str.replace("_x000D_","")
    ds1['RefList'] = ds1['RefList'].str.replace(" ","")
    ds1['RefList'] = ds1['RefList'].str.replace("\n","")
    print(ds1)

#ds1 = pd.read_excel('Filename_OP.xlsx','BOM', index_col=False)

    ds2 = ds1.explode('RefList')

    ds2['RefList'] = ds2['RefList'].str.replace(" "," ")

#ds2.drop(ds2.iloc[:, 1:6], inplace=True, axis=1)

    print(ds2)

    ds2.rename(columns = {'PartNumber':'B_Part_No'}, inplace = True)

    ds2.rename(columns = {'RefList':'B_Ref_List'}, inplace = True)

    ds2['B_Ref_List'] = ds2['B_Ref_List'] .str.strip('[]').str.split(',')

    print(ds2)

    ds2.to_dict()

    ds2.explode ('B_Ref_List',ignore_index=True)

    ds3 = ds2.explode('B_Ref_List',ignore_index=True) # split the Ref below example code

    '''import pandas as pd

    # Sample DataFrame
    data = {'ID': [1, 2], 'B_Ref_List': [['R1', 'R2'], ['R3', 'R4', 'R5']]}

    ds2 = pd.DataFrame(data)

    # Explode 'B_Ref_List'
    ds3 = ds2.explode('B_Ref_List', ignore_index=True)

    # Display the result
    print(ds3)
    Output:
        ID B_Ref_List
    0   1         R1
    1   1         R2
    2   2         R3
    3   2         R4
    4   2         R5'''

    ds2 = ds2[['Group','Priority','B_Part_No']]
    dc1 = ds2[['B_Part_No']]
    dc1.rename(columns = {'B_Part_No':'PBARNO'}, inplace = True)
    dc1['PBARPTN'] = dc1['PBARNO']
    dc1['PBARBAR'] = dc1['PBARNO']
    dc1.insert(3,'PBARQTY', 10000)
    dc1.insert(4,'PBARFTYP', 3)

#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#
    dfs2 = ds2[['Group','Priority','B_Part_No']]
    dfs2['Priority'] = dfs2['Priority'].astype(str).str.replace("15","A")
    dfs2['Priority'] = dfs2['Priority'].astype(str).str.replace("14","B")
    dfs2['Priority'] = dfs2['Priority'].astype(str).str.replace("13","C")
    dfs2['Priority'] = dfs2['Priority'].astype(str).str.replace("12","D")
    dfs2['Priority'] = dfs2['Priority'].astype(str).str.replace("11","E")
    dfs2['Priority'] = dfs2['Priority'].astype(str).str.replace("10","F")
    dfs2['Priority'] = dfs2['Priority'].astype(str).str.replace("9","PTN_9")
    dfs2['Priority'] = dfs2['Priority'].astype(str).str.replace("8","PTN_8")
    dfs2['Priority'] = dfs2['Priority'].astype(str).str.replace("7","PTN_7")
    dfs2['Priority'] = dfs2['Priority'].astype(str).str.replace("6","PTN_6")
    dfs2['Priority'] = dfs2['Priority'].astype(str).str.replace("5","PTN_5")
    dfs2['Priority'] = dfs2['Priority'].astype(str).str.replace("4","PTN_4")
    dfs2['Priority'] = dfs2['Priority'].astype(str).str.replace("3","PTN_3")
    dfs2['Priority'] = dfs2['Priority'].astype(str).str.replace("2","PTN_2")
    dfs2['Priority'] = dfs2['Priority'].astype(str).str.replace("1","PTN_1")
    dfs2['Priority'] = dfs2['Priority'].astype(str).str.replace("0","PTN_0")
    dfs2['Priority'] = dfs2['Priority'].astype(str).str.replace("A","PTN_15")
    dfs2['Priority'] = dfs2['Priority'].astype(str).str.replace("B","PTN_14")
    dfs2['Priority'] = dfs2['Priority'].astype(str).str.replace("C","PTN_13")
    dfs2['Priority'] = dfs2['Priority'].astype(str).str.replace("D","PTN_12")
    dfs2['Priority'] = dfs2['Priority'].astype(str).str.replace("E","PTN_11")
    dfs2['Priority'] = dfs2['Priority'].astype(str).str.replace("F","PTN_10")
    dfs2.dropna(subset=['Group'], inplace=True)
    #df2 = dfs2.pivot(index='Group',columns='Priority',values='B_Part_No')

    # Assuming 'dfs2' is the DataFrame with 'Group', 'Priority', and 'B_Part_No' columns
    # Check for duplicate entries in 'Group' and 'Priority'
    duplicate_entries = dfs2[dfs2.duplicated(subset=['Group', 'Priority'], keep=False)]

    if not duplicate_entries.empty:
        # Show an error message if duplicates are found
        root = tk.Tk()
        root.withdraw()  # Hide the main window
        error_message = f"Duplicate entries found in 'Group' and 'Priority':\n{duplicate_entries}"
        messagebox.showerror("Error", error_message)
        sys.exit(1)  # Exit the program with an error code

    # If no duplicates, proceed with pivoting
    try:
        df2 = dfs2.pivot(index='Group', columns='Priority', values='B_Part_No')
    except ValueError as e:
        # Handle the exception gracefully
        error_message = f"An error occurred during pivoting: {e}"
        root = tk.Tk()
        root.withdraw()  # Hide the main window
        messagebox.showerror("Error", error_message)
        sys.exit(1)  # Exit the program with an error code

    ds3.head()

    T10_col = ds3.pop('B_Ref_List') # col-1

    ds3.insert(0, 'B_Ref_List', T10_col)

    ds3 = ds3[['B_Ref_List','B_Part_No','Long Des']]

    ds1.dropna(subset=['RefList'], inplace=True)
    ds3.dropna(subset=['B_Ref_List'], inplace=True)

    #dsco1 = ds1['PartNumber'].value_counts().reset_index()
    dsco2 = ds1['Qty'].sum()
    dsco3 = len(ds3['B_Ref_List'])
    print(f'Total count of Qty in the "B_Ref_List" column SUM: {dsco2}')
    print(f'Total count of rows in the "B_Ref_List" column: {dsco3}')

        
    ds3['Bom Ref'] = ds3['B_Ref_List']

#ONLY AVL PARTMASTER AND GOUPING
    dsn1 = dsn1[['PartNumber', 'Group','Priority','Long Des','Qty','Shape','RefList']]
    dsn1['RefList'] = dsn1['RefList'].str.replace("_x000D_","")
    dsn1['RefList'] = dsn1['RefList'].str.replace(" ","")
    dsn1['RefList'] = dsn1['RefList'].str.replace("\n","")
    print(dsn1)

#ds1 = pd.read_excel('Filename_OP.xlsx','BOM', index_col=False)

    dsn2 = dsn1.explode('RefList')

    dsn2['RefList'] = dsn2['RefList'].str.replace(" "," ")

#ds2.drop(ds2.iloc[:, 1:6], inplace=True, axis=1)

    print(dsn2)

    dsn2.rename(columns = {'PartNumber':'B_Part_No'}, inplace = True)

    dsn2.rename(columns = {'RefList':'B_Ref_List'}, inplace = True)

    dsn2['B_Ref_List'] = dsn2['B_Ref_List'] .str.strip('[]').str.split(',')

    dsn2.to_dict()

    dsn2.explode ('B_Ref_List',ignore_index=True)

    dsn3 = dsn2.explode('B_Ref_List',ignore_index=True)

    dsn2 = dsn2[['Group','Priority','B_Part_No']]
    dcn1 = dsn2[['B_Part_No']]
    dcn1.rename(columns = {'B_Part_No':'PBARNO'}, inplace = True)
    dcn1['PBARPTN'] = dcn1['PBARNO']
    dcn1['PBARBAR'] = dcn1['PBARNO']
    dcn1.insert(3,'PBARQTY', 10000)
    dcn1.insert(4,'PBARFTYP', 3)

    #>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#
    dfsn2 = dsn2[['Group','Priority','B_Part_No']]
    dfsn2['Priority'] = dfsn2['Priority'].astype(str).str.replace("15","A")
    dfsn2['Priority'] = dfsn2['Priority'].astype(str).str.replace("14","B")
    dfsn2['Priority'] = dfsn2['Priority'].astype(str).str.replace("13","C")
    dfsn2['Priority'] = dfsn2['Priority'].astype(str).str.replace("12","D")
    dfsn2['Priority'] = dfsn2['Priority'].astype(str).str.replace("11","E")
    dfsn2['Priority'] = dfsn2['Priority'].astype(str).str.replace("10","F")
    dfsn2['Priority'] = dfsn2['Priority'].astype(str).str.replace("9","PTN_9")
    dfsn2['Priority'] = dfsn2['Priority'].astype(str).str.replace("8","PTN_8")
    dfsn2['Priority'] = dfsn2['Priority'].astype(str).str.replace("7","PTN_7")
    dfsn2['Priority'] = dfsn2['Priority'].astype(str).str.replace("6","PTN_6")
    dfsn2['Priority'] = dfsn2['Priority'].astype(str).str.replace("5","PTN_5")
    dfsn2['Priority'] = dfsn2['Priority'].astype(str).str.replace("4","PTN_4")
    dfsn2['Priority'] = dfsn2['Priority'].astype(str).str.replace("3","PTN_3")
    dfsn2['Priority'] = dfsn2['Priority'].astype(str).str.replace("2","PTN_2")
    dfsn2['Priority'] = dfsn2['Priority'].astype(str).str.replace("1","PTN_1")
    dfsn2['Priority'] = dfsn2['Priority'].astype(str).str.replace("0","PTN_0")
    dfsn2['Priority'] = dfsn2['Priority'].astype(str).str.replace("A","PTN_15")
    dfsn2['Priority'] = dfsn2['Priority'].astype(str).str.replace("B","PTN_14")
    dfsn2['Priority'] = dfsn2['Priority'].astype(str).str.replace("C","PTN_13")
    dfsn2['Priority'] = dfsn2['Priority'].astype(str).str.replace("D","PTN_12")
    dfsn2['Priority'] = dfsn2['Priority'].astype(str).str.replace("E","PTN_11")
    dfsn2['Priority'] = dfsn2['Priority'].astype(str).str.replace("F","PTN_10")
    dfsn2.dropna(subset=['Group'], inplace=True)
    #dfn2 = dfsn2.pivot(index='Group',columns='Priority',values='B_Part_No')

        # Assuming 'dfs2' is the DataFrame with 'Group', 'Priority', and 'B_Part_No' columns
    # Check for duplicate entries in 'Group' and 'Priority'
    duplicate_entries = dfs2[dfs2.duplicated(subset=['Group', 'Priority'], keep=False)]

    if not duplicate_entries.empty:
        # Show an error message if duplicates are found
        root = tk.Tk()
        root.withdraw()  # Hide the main window
        error_message = f"Duplicate entries found in 'Group' and 'Priority':\n{duplicate_entries}"
        messagebox.showerror("Error", error_message)
        sys.exit(1)  # Exit the program with an error code

    # If no duplicates, proceed with pivoting
    try:
        dfn2 = dfsn2.pivot(index='Group', columns='Priority', values='B_Part_No')
    except ValueError as e:
        # Handle the exception gracefully
        error_message = f"An error occurred during pivoting: {e}"
        root = tk.Tk()
        root.withdraw()  # Hide the main window
        messagebox.showerror("Error", error_message)
        sys.exit(1)  # Exit the program with an error code

    # Desired column order
    desired_order = ['Group Name','PTN_1','PTN_2','PTN_3','PTN_4','PTN_5','PTN_6','PTN_7','PTN_8','PTN_9','PTN_10','PTN_11','PTN_12','PTN_13','PTN_14','PTN_15']
    #desired_order = ['Group Name','AVL Name','Comment','PTN_1','P_1','PTN_2','P_2','PTN_3','P_3','PTN_4','P_4','PTN_5','P_5','PTN_6','P_6','PTN_7','P_7','PTN_8','P_8','PTN_9','P_9','PTN_10','P_10','PTN_11','P_11','PTN_12','P_12','PTN_13','P_13','PTN_14','P_14','PTN_15','P_15']

    # Create a list of columns present in both DataFrame and desired_order
    common_columns = [col for col in desired_order if col in dfn2.columns]

    # Reorder the DataFrame based on the desired_order
    df_AL1 = dfn2[common_columns]

    '''    # Assuming df is your DataFrame
        column_to_check = 'PTN_15'

        # Check if the column is present
        if column_to_check not in df_AL1.columns:
            # Show a pop-up message if the column is not present
            root = tk.Tk()
            root.withdraw()  # Hide the main window
            messagebox.showinfo("Notification", f"The column '{column_to_check}' is missing.")

        # Continue with the rest of your code
        print("Continuing with the rest of the code...")
        # Your next line of code here'''

    # Assuming df is your DataFrame
    column_to_check = 'PTN_11'

    # Check if the column is present
    if column_to_check in df_AL1.columns:
        # Show a pop-up message if the column is present
        root = tk.Tk()
        root.withdraw()  # Hide the main window
        messagebox.showinfo("Notification", f"The column '{column_to_check}' is present.")

    # Continue with the rest of your code
    print("Continuing with the rest of the code...")
    # Your next line of code here

    dsn3.head()

    T10_col = dsn3.pop('B_Ref_List') # col-1

    dsn3.insert(0, 'B_Ref_List', T10_col)

    dsn3 = dsn3[['B_Ref_List','B_Part_No','Long Des']]

    dsn1.dropna(subset=['RefList'], inplace=True)
    dsn3.dropna(subset=['B_Ref_List'], inplace=True)

    yourfolder4 = r"D:\NX_BACKWORK\Feeder Setup_PROCESS\#Output\Verified"

    if not os.path.isdir(yourfolder4):
        print('Folder Not Exist')
        os.makedirs(yourfolder4)

#########################################################################################################################################################################
#########################################################################################################################################################################

    try:
        # XY Data MANIPULATION
        os.chdir('D:/NX_BACKWORK/Feeder Setup_PROCESS/#Output/BOM')
        file_path_xlsx = 'BOM.xlsx'
        file_path_xls = 'BOM.xls'

        if os.path.isfile(file_path_xlsx):
            dsxy1 = pd.read_excel(file_path_xlsx, sheet_name="XY DATA", usecols=['R', 'X', 'Y', 'A', 'S'], index_col=False)
        elif os.path.isfile(file_path_xls):
            dsxy1 = pd.read_excel(file_path_xls, sheet_name="XY DATA", usecols=['R', 'X', 'Y', 'A', 'S'], index_col=False)
        else:
            root = tk.Tk()
            root.withdraw()
            error_message = "BOM file not found. Please check the file path."
            messagebox.showerror("Error", error_message)
            sys.exit(1)  # Exit the program with an error code

        dfXY1 = dsxy1

        # Define your column lists
        column_list_1 = ['R', 'X', 'Y', 'A', 'S']

        # Check which column list is present in the DataFrame
        if all(column in dsxy1.columns for column in column_list_1):
            columns_to_use = column_list_1
        else:
            root = tk.Tk()
            root.withdraw()  # Hide the main window
            missing_columns = [column for column in column_list_1 if column not in dsxy1.columns]
            error_message = f"The following columns are missing: {', '.join(missing_columns)}"
            error_msgbm1 = "The following columns are missing in BOM (EXCEL) File Sheet 'XY DATA':\n'Reference CRD as R'\n'X Coordinate as X'\n'Y Coordinate as Y'\n'Angle as A'\n'Side as S'"
            messagebox.showerror("Error", error_message)
            messagebox.showerror("Error", error_msgbm1)
            sys.exit(1)  # Exit the program with an error code

        dfXY1['R'] = dfXY1['R'].str.replace(" ","")
        dfXY1.rename(columns={'R': 'B_Ref_List'}, inplace=True)
        dfXY1['R'] = dfXY1['B_Ref_List']

        dfXYC1 = len(dfXY1['B_Ref_List'])
        print(f'Total count of rows in the "B_Ref_List" column: {dfXYC1}')
        dfXYC2 = dfXY1['S'].value_counts()

    except Exception as e:
        # Handle the exception gracefully
        error_message = f"An error occurred: {e}"

        # Show error message in a pop-up box
        root = tk.Tk()
        root.withdraw()  # Hide the main window
        messagebox.showerror("Error", error_message)
        error_msgbm1 = f"The following columns are missing in BOM Sheet 'XY DATA':\n'Reference CRD as R'\n'X Coordinate as X'\n'Y Coordinate as Y'\n'Angle as A'\n'Side as S'"
        messagebox.showerror("Error", error_msgbm1)
        sys.exit(1)  # Exit the program with an error code


    with pd.ExcelWriter("D:/NX_BACKWORK/Feeder Setup_PROCESS/#Output/Verified/BOM_List_OP.xlsx") as writer:

        ds1.to_excel(writer, sheet_name="BOM", index=False)
        dfXY1.to_excel(writer, sheet_name="XY DATA", index=False)
        dsn2.to_excel(writer, sheet_name="AVL GROUP", index=False)
        dcn1.to_excel(writer, sheet_name="PART MASTER", index=False)
        df_AL1.to_excel(writer, sheet_name="AVL SHEET", index=True)
        ds3.to_excel(writer, sheet_name="BOM DATA", index=False)
        count_df = pd.DataFrame({'BOM Ref Count': [dsco3]})
        count_df.to_excel(writer, sheet_name="BOM Ref Count", index=TRUE)
        count_df = pd.DataFrame({'XY Ref Count': [dfXYC1]})
        count_df.to_excel(writer, sheet_name="XY Ref Count", index=TRUE)
        dfXYC2.to_excel(writer, sheet_name="XY Side Counts", index=True)

    pass
    print('The file does not exist.')

#########################################################################################################################################################################
#########################################################################################################################################################################
#########################################################################################################################################################################
#########################################################################################################################################################################

#BOM XY VERIFICATION CODE BOM AND XY DATA AS VISE VERSA

    os.getcwd()
    Chd= os.chdir('D:/NX_BACKWORK/Feeder Setup_PROCESS/#Output/Verified')
    Chd = os.getcwd()

    # Excel file path
    dfvbxy1 = pd.read_excel("BOM_List_OP.xlsx", sheet_name="BOM DATA")
    dfvbxy2 = pd.read_excel("BOM_List_OP.xlsx", sheet_name="XY DATA")
    
    dfvbxy3 = pd.merge(dfvbxy1, dfvbxy2, on='B_Ref_List', how='left')
    dfvbxy4 = pd.merge(dfvbxy2, dfvbxy1, on='B_Ref_List', how='left')

    dfvbxy3["BOM and XY Compare"] = (dfvbxy3["Bom Ref"] == dfvbxy3["R"])
    dfvbxy3['BOM and XY Compare'] = dfvbxy3['BOM and XY Compare'].replace('TRUE','MATCH')
    dfvbxy3['BOM and XY Compare'] = dfvbxy3['BOM and XY Compare'].replace('FALSE','MISS_MATCH')

    dfvbxy3 = dfvbxy3.copy()
    dfvbxy3['BOM and XY Compare'] = dfvbxy3['BOM and XY Compare'].map({True: 'Match', False: 'Miss_Match'})
    dfvbxy3.sort_values(by='BOM and XY Compare', inplace=True, ascending=False)

    dfvbxy4["XY and BOM Compare"] = (dfvbxy4["R"] == dfvbxy4["Bom Ref"])
    dfvbxy4['XY and BOM Compare'] = dfvbxy4['XY and BOM Compare'].replace('TRUE','MATCH')
    dfvbxy4['XY and BOM Compare'] = dfvbxy4['XY and BOM Compare'].replace('FALSE','MISS_MATCH')

    dfvbxy4 = dfvbxy4.copy()
    dfvbxy4['XY and BOM Compare'] = dfvbxy4['XY and BOM Compare'].map({True: 'Match', False: 'Miss_Match'})
    dfvbxy4.sort_values(by='XY and BOM Compare', inplace=True, ascending=False)

    dfvbxyc3 = dfvbxy3['BOM and XY Compare'].value_counts()
    dfvbxyc4 = dfvbxy4['XY and BOM Compare'].value_counts()

    with pd.ExcelWriter("D:/NX_BACKWORK/Feeder Setup_PROCESS/#Output/Verified/Bom_List-Verified.xlsx") as writer:
        dfvbxy3.to_excel(writer, sheet_name="Bom to XY", index=False)
        dfvbxy4.to_excel(writer, sheet_name="XY to Bom", index=False)
        #dfvbxyc3.to_excel(writer, sheet_name="BOM and XY Compare", index=True)
        #dfvbxyc4.to_excel(writer, sheet_name="XY and BOM Compare", index=True)

# MOVE THE Bo_List-Verified to BOM_List_OP
    def copy_sheet(source_wb_path, source_sheet_name, target_wb_path, target_sheet_name):
        # Read the source sheet into a DataFrame
        df = pd.read_excel(source_wb_path, sheet_name=source_sheet_name)

        # Open the target workbook in append mode
        with pd.ExcelWriter(target_wb_path, engine='openpyxl', mode='a') as writer:
            # Write the DataFrame to the target sheet
            df.to_excel(writer, sheet_name=target_sheet_name, index=False)

    # File paths
    source_wb_path = 'Bom_List-Verified.xlsx'
    target_wb_path = 'BOM_List_OP.xlsx'

    # Sheet names
    source_sheet_name_1 = 'Bom to XY'
    source_sheet_name_2 = 'XY to Bom'

    target_sheet_name_1 = 'Bom to XY'
    target_sheet_name_2 = 'XY to Bom'
    
    # Copy sheets from source workbook to target workbook
    copy_sheet(source_wb_path, source_sheet_name_1, target_wb_path, target_sheet_name_1)
    copy_sheet(source_wb_path, source_sheet_name_2, target_wb_path, target_sheet_name_2)

    file_path = 'Bom_List-Verified.xlsx'
    directory_path = 'D:/NX_BACKWORK/Feeder Setup_PROCESS/#Output/Verified'

    print(os.path.isfile(file_path))
    print(os.path.isfile(directory_path))

    try:
        if os.path.isfile(file_path):
            dt_H1 = pd.read_csv(file_path)

    except ValueError:
        if os.path.exists("Bom_List-Verified.xlsx"):
            os.remove("Bom_List-Verified.xlsx")
    else:
        print("The file does not exist")

#########################################################################################################################################################################
#########################################################################################################################################################################
#########################################################################################################################################################################
#########################################################################################################################################################################

# Arrange single file and Highlight

    os.getcwd()
    Chd= os.chdir('D:/NX_BACKWORK/Feeder Setup_PROCESS/#Output/Verified')
    Chd = os.getcwd()

        # Excel file path
    dfah1 = pd.read_excel("BOM_List_OP.xlsx", sheet_name="Bom to XY")
    dfah2 = pd.read_excel("BOM_List_OP.xlsx", sheet_name="XY to Bom")
    dfah3 = pd.read_excel("BOM_List_OP.xlsx", sheet_name="BOM")
    dfah4 = pd.read_excel("BOM_List_OP.xlsx", sheet_name="XY DATA")
    dfah5 = pd.read_excel("BOM_List_OP.xlsx", sheet_name="BOM DATA")
    dfah6 = pd.read_excel("BOM_List_OP.xlsx", sheet_name="AVL GROUP")
    dfah7 = pd.read_excel("BOM_List_OP.xlsx", sheet_name="AVL SHEET")
    dfah8 = pd.read_excel("BOM_List_OP.xlsx", sheet_name="PART MASTER")

    # Define a function for row styling
    def highlight_row(row):
            return ['background-color: lightgreen' if 'Match' in row.values else
                    'background-color: yellow' if 'Miss_Match' in row.values else
                    '' for _ in row]
        
        # Apply the styling function to the DataFrame
    style_df1 = dfah1.style.apply(highlight_row, axis=1)

            # Define a function for row styling
    def highlight_row(row):
            return ['background-color: lightgreen' if 'Match' in row.values else
                    'background-color: yellow' if 'Miss_Match' in row.values else
                    '' for _ in row]
        
        # Apply the styling function to the DataFrame
    style_df2 = dfah2.style.apply(highlight_row, axis=1)

    with pd.ExcelWriter("D:/NX_BACKWORK/Feeder Setup_PROCESS/#Output/Verified/Bom_List-Verified.xlsx", engine='openpyxl') as writer:
        style_df1.to_excel(writer, sheet_name="Bom to XY", index=False)
        style_df2.to_excel(writer, sheet_name="XY to Bom", index=False)
        dfah3.to_excel(writer, sheet_name="BOM", index=False)
        dfah4.to_excel(writer, sheet_name="XY DATA", index=False)
        dfah5.to_excel(writer, sheet_name="BOM DATA", index=False)
        dfah6.to_excel(writer, sheet_name="AVL GROUP", index=False)
        dfah7.to_excel(writer, sheet_name="AVL SHEET", index=False)
        dfah8.to_excel(writer, sheet_name="PART MASTER", index=False)
        
        print("``````BOM XY progress Complete``````")
        print("``````````````````````````````````````````````")
        print(f"Current Date and Time: {formatted_datetime}")
        print("``````````````````````````````````````````````")
        print("\n")
        print(f'BOM Part-No Qty column SUM: {dsco2}')
        print("``````````````````````````````````````````````")
        print(f'Total count of BOM in the "B_Ref_List" column: {dsco3}')
        print("``````````````````````````````````````````````")
        print(f'Total count of XY in the "Reference" column: {dfXYC1}')
        print("``````````````````````````````````````````````")
        print(f'Total count of XY side in the "S" column: {dfXYC2}')
        print("``````````````````````````````````````````````")
        print(f'BOM and XY Compare: {dfvbxyc3}')
        print("``````````````````````````````````````````````")
        print(f'XY and BOM Compare: {dfvbxyc4}')
        print("``````````````````````````````````````````````")

# Define the PySimpleGUI layout
layout = [
    [sg.Multiline(size=(160, 40), font=('Courier', 9), key='-LOGWINDOW-')],
    [sg.Button('Save to Excel'), sg.Button('Quit')]
]

# Create the window
window = sg.Window("BOM XY VERIFICATION", layout, finalize=True)

def print_to_log(*args, **kwargs):
    window['-LOGWINDOW-'].print(*args, **kwargs)
    window.Refresh()

def save_to_excel(log_contents):
    # Get the current date and time
    current_datetime = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")

    # Split log contents into lines
    lines = log_contents.strip().split('\n')

    # Create a DataFrame with each line in a new row
    df = pd.DataFrame({'LogContents': lines})

    # Save the DataFrame to the same Excel file with a new sheet
    excel_file_path = 'Bom_List-Verified.xlsx'
    with pd.ExcelWriter(excel_file_path, engine='openpyxl', mode='a') as writer:
        df.to_excel(writer, sheet_name=f'Log_{current_datetime}', index=False)

    return f"Log saved to {excel_file_path}, Sheet: Log_{current_datetime}"

print_to_log("BOM XY VERIFICATION___Compelete $ PROCESS $")

sys.stdout.write("\n")


print_to_log("``````BOM XY progress Complete``````")
print_to_log("``````````````````````````````````````````````")
print_to_log(f"Current Date and Time: {formatted_datetime}")
print_to_log("``````````````````````````````````````````````")
print_to_log("\n")
print_to_log(f'BOM Part-No Qty column SUM: {dsco2}')
print_to_log("``````````````````````````````````````````````")
print_to_log(f'Total count of BOM in the "B_Ref_List" column: {dsco3}')
print_to_log("``````````````````````````````````````````````")
print_to_log(f'Total count of XY in the "Reference" column: {dfXYC1}')
print_to_log("``````````````````````````````````````````````")
print_to_log(f'Total count of XY side in the "S" column: {dfXYC2}')
print_to_log("``````````````````````````````````````````````")
print_to_log(f'BOM and XY Compare: {dfvbxyc3}')
print_to_log("``````````````````````````````````````````````")
print_to_log(f'XY and BOM Compare: {dfvbxyc4}')
print_to_log("``````````````````````````````````````````````")


# Create an event loop
while True:
    event, values = window.read()

    if event == sg.WIN_CLOSED or event == 'Quit':
        break
    elif event == 'Save to Excel':
        # Get the contents of the log window
        log_contents = values['-LOGWINDOW-']

        # Save to Excel and get the log information
        log_info = save_to_excel(log_contents)

        print_to_log(log_info)

time.sleep (2)
# Close the window
window.close()

