import pandas as pd
import numpy as np
import lxml
import os
from os import getcwd
import openpyxl
from openpyxl.workbook import workbook
from openpyxl import load_workbook
from openpyxl.styles import PatternFill
import xlsxwriter
from io import StringIO
import csv as csv
import linecache
import ast
import tkinter as tk
from tkinter import *
from tkinter import filedialog
from tkinter import messagebox 
from tkinter.filedialog import askopenfile
import seaborn as ssn
import matplotlib
import matplotlib as mlp
from matplotlib import pyplot as plt
from io import BytesIO
import time
import sys
import xlwings as xw
import openpyxl
from openpyxl.utils.dataframe import dataframe_to_rows
import pyxcelframe
from openpyxl import load_workbook
from pyxcelframe import copy_cell_style
from pyxcelframe import insert_frame
from pyxcelframe import insert_columns
from pyxcelframe import sheet_to_sheet
from pyxcelframe import column_last_row
import PySimpleGUI as sg
import subprocess
import threading
import urllib
import urllib.parse
import sqlalchemy 
import sqlalchemy_access as sq_a
import sqlalchemy_pyodbc_mssql as sqlalchemy
from flask_sqlalchemy import SQLAlchemy
from sqlalchemy import create_engine
import shutil
import pyodbc
import pypyodbc
import odbc
import psycopg2
import mysql.connector as sql  #1
import MySQLdb as sql
from sqlite3 import dbapi2 as sqlite
import sqlite3
from datetime import datetime #2
import re
from plyer import notification
import xlrd

##########################################################################################################################################
os.getcwd()
Chd= os.chdir('D:/NX_BACKWORK/Feeder Setup_PROCESS/#Output/Verified')
Chd = os.getcwd()
##########################################################################################################################################

##SHAPE & PACKAGE##

# Load the Excel file
excel_file_path = 'BOM_List_OP.xlsx'  # Replace with your file path

# Define your column lists
column_list = ["PartNumber", "Group", 'Priority', 'RefList', 'Qty', 'Shape', 'Long Des']

dfshp = pd.read_excel(excel_file_path, sheet_name='BOM' ,usecols=column_list, index_col= False)

print(dfshp)

dfshp = dfshp[['PartNumber', 'Long Des']]

print(dfshp)

dfshp.rename(columns = {'Long Des':'Description'}, inplace = True)

#dfshp['Description'] = dfshp['Long Des']

#dfshp = dfshp['PartNUmber', 'Description']

dfshp = pd.DataFrame(dfshp)
# Define desired shapes
desired_shapes = ("0201", "0402", "0603", "0805", "1206")

# Custom function to extract and separate the shape
def extract_shape(description):
    shape_match = re.search(r'\b\d{4}\b', description)
    if shape_match:
        shape = shape_match.group()
        if shape in desired_shapes:
            return shape
    return None

# Apply the custom function to create the Shape column
dfshp['Shape'] = dfshp['Description'].apply(extract_shape)

# Display the result
print(dfshp[['PartNumber', 'Description', 'Shape']])
#--------------------------------------------------------------
'''#Desire Tol
desired_Tol = ("1%", "5%", "10%", "15%", "20%", "25%", "±1%", "±5%", "±10%", "±15%", "±20%", "±25%")

# Custom function to extract and separate the shape
def extract_tol(description):
    tol_match = re.search(r'\b\d{2}\b', description)
    if tol_match:
        tol = tol_match.group()
        if tol in desired_Tol:
            return tol
    return None

# Apply the custom function to create the Shape column
dfshp['Tol'] = dfshp['Description'].apply(extract_tol)

# Display the result
print(dfshp[['Description', 'Tol']])'''

# Custom function to extract and separate the tolerance
def extract_tol(description):
    tol_match = re.search(r'[±]?\d+%', description)
    if tol_match:
        return tol_match.group()
    return None

# Apply the custom function to create the Tol column
dfshp['Tol'] = dfshp['Description'].apply(extract_tol)

# Display the result
print(dfshp[['PartNumber', 'Description', 'Tol']])

#--------------------------------------------------------------
# Define desired component types
desired_COMP = ("CAP", "RES", "IND")

# Custom function to extract and separate the component type
def extract_COMPs(description):
    for comp_type in desired_COMP:
            if comp_type.lower() in description.lower():
                return comp_type
    return None

# Apply the custom function to create the LCRTYPE column
dfshp['LCRTYPE'] = dfshp['Description'].apply(extract_COMPs)

# Define desired Special component types
desired_SPERESCOMP = ["MELF"]

# Custom function to check if the description contains special components
def contains_special_res_component(description):
    for serescomp_type in desired_SPERESCOMP:
        if serescomp_type.lower() in description.lower():
            return True
    return False

# Apply the custom function to create the SPERESCOMP column
dfshp['SPERESCOMP'] = dfshp['Description'].apply(contains_special_res_component)

# Transform 'SPERESCOMP' column to 'MELF' when it's True
dfshp['SPERESCOMP'] = np.where(dfshp['SPERESCOMP'], 'MELF', '')

# Define desired Special component types
desired_SPETHTCOMP = ["THT"]

# Custom function to check if the description contains special components
def contains_special_tht_component(description):
    for sethtcomp_type in desired_SPETHTCOMP:
        if sethtcomp_type.lower() in description.lower():
            return True
    return False

# Apply the custom function to create the SPERESCOMP column
dfshp['SPETHTCOMP'] = dfshp['Description'].apply(contains_special_tht_component)

# Transform 'SPERESCOMP' column to 'MELF' when it's True
dfshp['SPETHTCOMP'] = np.where(dfshp['SPETHTCOMP'], 'THT', '')

# Define desired Special component types
desired_SPESODCOMP = ("ZENER", "DIODE", "SOD")

# Custom function to extract and separate the component type
def extract_SPESODCOMP(description):
    for sesodcomp_type in desired_SPESODCOMP:
        if sesodcomp_type.lower() in description.lower():
            return sesodcomp_type
    return None

# Apply the custom function to create the LCRTYPE column
dfshp['SPESODCOMP'] = dfshp['Description'].apply(extract_SPESODCOMP)

# Define desired Special component types
desired_SPECAPCOMP = ("TAN", "Tantalum", "Aluminium","ALLUM", "ALUM", "Electrolytic" ,"ALU")

# Custom function to extract and separate the component type
def extract_SPECAPCOMP(description):
    for setancomp_type in desired_SPECAPCOMP:
        if setancomp_type.lower() in description.lower():
            return setancomp_type
    return None

# Apply the custom function to create the LCRTYPE column
dfshp['SPECAPCOMP'] = dfshp['Description'].apply(extract_SPECAPCOMP)


# Assuming df is your DataFrame
dfshp['PACKAGE'] = dfshp['Shape'].replace({'0201': '0802P', '0402': '0802P', '0603': '0804P', '0805': '0804E', '1206': '0804E'})

dfshp = dfshp.rename(columns={"Description": "Long Des"})

# Display the result
print(dfshp[['Long Des', 'Shape', 'LCRTYPE', 'SPERESCOMP', 'SPETHTCOMP', 'SPESODCOMP', 'SPECAPCOMP', 'PACKAGE']])

#########################################################################################################################################################################
#########################################################################################################################################################################
print('\n')
print("\033[92;4m*******LCR Generation Progress*******\033[0m")
print('\n')
#########################################################################################################################################################################
#########################################################################################################################################################################


# Function to extract LCR information
def extract_component_info(component_line):
    # Regular expressions for CAPACITOR
    capacitor_type_match = re.search(r'\b(CAP|Capacitor|MLCC|CAPACITOR)\b', component_line, re.IGNORECASE)
    capacitor_value_match = re.search(r'(\d+(\.\d+)?)([pnuμmkKMΩ]?)\s*(\d+%)?', component_line) #NPU
    capacitor_tolerance_match = re.search(r'[±](\d+)%', component_line)
    # Regular expressions for RESISTOR
    resistor_type_match = re.search(r'\b(Res|Resistor|FLIM|RESISTOR)\b', component_line, re.IGNORECASE)
    resistor_value_match = re.search(r'(\d+(\.\d+)?)([pnuμmkKMΩ]?)\s*(\d+%)?', component_line)
    resistor_tolerance_match = re.search(r'[±](\d+)%', component_line)
    # Assign default values
    LCR_Type = None
    LCR_Value = None
    LCR_Unit = None
    LCR_Tolerance = None

    if capacitor_type_match:
        LCR_Type = capacitor_type_match.group(1)

    if capacitor_tolerance_match:
        LCR_Tolerance = capacitor_tolerance_match.group(1)

    if capacitor_value_match:
        groups = capacitor_value_match.groups()
        LCR_Value = groups[0] if groups[0] is not None else None
        LCR_Unit = groups[2] if groups[2] is not None else None

    if resistor_type_match:
        LCR_Type = resistor_type_match.group(1)

    if resistor_value_match:
        groups = resistor_value_match.groups()
        LCR_Value = groups[0] if groups[0] is not None else None
        LCR_Unit = groups[2] if groups[2] is not None else None

    if resistor_tolerance_match:
        LCR_Tolerance = resistor_tolerance_match.group(1)

    return LCR_Type, LCR_Value, LCR_Unit, LCR_Tolerance

# Set your working directory
os.chdir('D:/NX_BACKWORK/Feeder Setup_PROCESS/#Output/Verified')

# Load the Excel file
excel_file_path = 'BOM_List_OP.xlsx'  # Replace with your file path

# Define your column list
column_names = ["Long Des", "PartNumber"]

# Read the Excel file without index_col and add 'PartNumber' to the column_names list
dflcr = pd.read_excel(excel_file_path, sheet_name='BOM', usecols=column_names)

# Add 'PartNumber' as a separate column
dflcr['PartNumber'] = pd.read_excel(excel_file_path, sheet_name='BOM', usecols=['PartNumber'])

# Apply the extract_component_info function to create LCR columns
dflcr[['LCR Type', 'LCR Value', 'LCR Unit', 'LCR Tolerance']] = dflcr['Long Des'].apply(extract_component_info).apply(pd.Series)

# Display the result
print(dflcr[['PartNumber', 'LCR Type', 'LCR Value', 'LCR Unit', 'LCR Tolerance']])

with pd.ExcelWriter("D:/NX_BACKWORK/Feeder Setup_PROCESS/#Output/Verified/Bom_List-Verified.xlsx", engine='openpyxl') as writer:
    dfshp.to_excel(writer, sheet_name="SHP-PKG", index=False)
    dflcr.to_excel(writer, sheet_name="LCR", index=False)